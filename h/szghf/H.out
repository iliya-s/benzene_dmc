#INFO: **** input file is /projects/ilsa8974/experiments/VMCr/papers/jpghf_realspace/benzene/szghf/H/szGHF.py ****
import json
from pyscf import gto, scf, tools
import numpy as np
import scipy.linalg as lalg
import scipy.optimize as opt
import time
import sys

def contractEri(v2, dm1):
    nso = dm1.shape[0]
    nao = nso // 2

    dm1aa = dm1[:nao, :nao]
    dm1bb = dm1[nao:, nao:]
    dm1ab = dm1[:nao, nao:]
    dm1ba = dm1[nao:, :nao]

    #the spin indices on the J, K matrices are from the contracted indices
    Jaa = np.einsum('pqrs,sr->pq', v2, dm1aa, dtype = complex)

    Jbb = np.einsum('pqrs,sr->pq', v2, dm1bb, dtype = complex)

    Kaa = np.einsum('psrq,sr->pq', v2, dm1aa, dtype = complex)
    Kbb = np.einsum('psrq,sr->pq', v2, dm1bb, dtype = complex)

    Kab = np.einsum('psrq,sr->pq', v2, dm1ba, dtype = complex)
    Kba = np.einsum('psrq,sr->pq', v2, dm1ab, dtype = complex)

    G1 = np.zeros((nso, nso), dtype = complex)
    G1[:nao, :nao] = Jaa + Jbb - Kaa
    G1[nao:, nao:] = Jaa + Jbb - Kbb
    G1[:nao, nao:] = - Kba
    G1[nao:, :nao] = - Kab

    return G1

def calcSzSymmetryProjector(nao, sz, nGrid = 8):
    Wg = []
    Rg = []
    for p in range(nGrid):
        theta = 2 * np.pi * p / nGrid

        w = np.exp(- 1j * theta * sz) / nGrid
        Wg.append(w)

        r = lalg.block_diag(np.exp(1j * theta * 0.5) * np.identity(nao), np.exp(1j * theta * (- 0.5)) * np.identity(nao))
        Rg.append(r)
    return Wg, Rg

def calcEnergy(S, H1, v2, Psi, Wg, Rg):
    Bra = Psi.copy()
    Ket = Psi.copy()

    D = 0.0
    N = 0.0
    for i in range(len(Wg)):
        Ketg = Rg[i].dot(Ket)

        #overlap quantities
        O = Bra.conj().T.dot(S).dot(Ketg)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #density matrix
        dm1 = Ketg.dot(invO).dot(Bra.conj().T)

        #hamiltonian quantities
        G1 = contractEri(v2, dm1)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, dm1, dtype = complex)

        #averages with symmetry weights
        D += Wg[i] * detO
        N += Wg[i] * detO * H

    E = N / D
    return np.real(E)

def calcGradient(S, H1, v2, Psi, Wg, Rg):
    Bra = Psi.copy()
    Ket = Psi.copy()

    D = 0.0
    N = 0.0
    Dab = np.zeros(Psi.shape, dtype = complex)
    Nab = np.zeros(Psi.shape, dtype = complex)
    for i in range(len(Wg)):
        Ketg = Rg[i].dot(Ket)

        #overlap quantities
        O = Bra.conj().T.dot(S).dot(Ketg)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #derivative of detO with respect to a,b orbital coefficient
        detOab  = detO * np.einsum('ai,i,ij,jb->ab', S, np.diag(Rg[i]), Psi, invO, dtype = complex)
        #detOab += detO * np.einsum('bi,ji,ja,a->ab', invO, Psi, S, np.diag(Rg[i]), dtype = complex)
        detOab = detOab + detOab

        #density matrix
        dm1 = Ketg.dot(invO).dot(Bra.conj().T)

        #hamiltonian quantities
        G1 = contractEri(v2, dm1)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, dm1, dtype = complex)

        #drivative of H with respect to a,b orbital coefficient
        M = H1 + G1
        A1ab = np.einsum('bi,pi,pa,a->ab', invO, Psi, M, np.diag(Rg[i]), dtype = complex)
        #A2ab = np.einsum('aq,q,qi,ib->ab', M, np.diag(Rg[i]), Psi, invO, dtype = complex)
        A2ab = A1ab

        #B1ab = - np.einsum('ai,i,ij,jk,pk,pq,q,ql,lb->ab', S, np.diag(Rg[i]), Psi, invO, Psi, M, np.diag(Rg[i]), Psi, invO, dtype = complex)
        C1ak = np.einsum('ai,i,ij,jk->ak', S, np.diag(Rg[i]), Psi, invO, dtype = complex)
        D1pb = np.einsum('pq,q,ql,lb->pb', M, np.diag(Rg[i]), Psi, invO, dtype = complex)
        B1ab = - np.einsum('ak,pk,pb->ab', C1ak, Psi, D1pb)

        #B2ab = - np.einsum('bi,pi,pq,q,qj,jk,lk,la,a->ab', invO, Psi, M, np.diag(Rg[i]), Psi, invO, Psi, S, np.diag(Rg[i]), dtype = complex)
        #C2bq = np.einsum('bi,pi,pq,q->bq', invO, Psi, M, np.diag(Rg[i]), dtype = complex)
        #D2ja = np.einsum('jk,lk,la,a->ja', invO, Psi, S, np.diag(Rg[i]), dtype = complex)
        #B2ab = - np.einsum('bq,qj,ja->ab', C2bq, Psi, D2ja, dtype = complex)
        B2ab = B1ab

        Hab = A1ab + A2ab + B1ab + B2ab

        #averages with symmetry weights
        D += Wg[i] * detO
        Dab += Wg[i] * detOab

        N += Wg[i] * detO * H
        Nab += Wg[i] * (detOab * H + detO * Hab)

    E = N / D
    J = Nab / D - E * (Dab / D)
    return np.real(J)

def calcGradientFiniteDifference(S, H1, v2, Psi, Wg, Rg):
    ds = 1.e-6
    J = np.zeros(Psi.shape, dtype = complex)

    E0 = calcEnergy(S, H1, v2, Psi, Wg, Rg)
    for a in range(Psi.shape[0]):
        for b in range(Psi.shape[1]):
            Ket = Psi.copy()
            Ket[a, b] += ds
            E = calcEnergy(S, H1, v2, Ket, Wg, Rg)

            J[a, b] = (E - E0) / ds

    return J

#the following four functions are helpers to use scipy's optimization library

def real_to_complex(z): #real vector of length 2n -> complex of length n
    return z[:len(z)//2] + 1j * z[len(z)//2:]

def complex_to_real(z): #complex vector of length n -> real of length 2n
    return np.concatenate((np.real(z), np.imag(z)))

def fun(params, nelectron, S, H1, v2, Wg, Rg):
    #wavefunction
    nso = S.shape[0]
    Psi = params.reshape((nso, nelectron))
    return calcEnergy(S, H1, v2, Psi, Wg, Rg)

def jac(params, nelectron, S, H1, v2, Wg, Rg):
    #wavefunction
    nso = S.shape[0]
    Psi = params.reshape((nso, nelectron))
    J = calcGradient(S, H1, v2, Psi, Wg, Rg)
    return J.flatten()

def pGHF(mol, mo_coeff):
    #basic molecule info and integrals
    sz = float(mol.spin) / 2
    ne = mol.nelectron
    nao = mol.nao
    nso = 2 * mol.nao
    s = mol.intor('int1e_ovlp')
    t = mol.intor('int1e_kin')
    v1 = mol.intor('int1e_nuc')
    v1ecp = mol.intor('ECPscalar')
    v2 = mol.intor('int2e', aosym='s1')

    #spin integrals
    S = lalg.block_diag(s, s)
    h1 = t + v1 + v1ecp
    H1 = lalg.block_diag(h1, h1)

    assert(mo_coeff.shape[0] == nso)
    assert(mo_coeff.shape[1] == nso)
    #Psi will always be the wavefunction
    Psi = mo_coeff[:, 0:ne].copy()

    #slight amount of noise helps optimization
    Psi += np.random.randn(nso, ne) / 100

    #Sz symmetry projector
    nGrid = 10
    Wg, Rg = calcSzSymmetryProjector(nao, sz, nGrid)

    Eold = 100
    dt = 0.1
    tol = 1.e-8
    doPrint = True
    calcStart = time.time()
    for m in range(20):
        iterStart = time.time()

        #energy
        E = calcEnergy(S, H1, v2, Psi, Wg, Rg)

        #gradient
        J = calcGradient(S, H1, v2, Psi, Wg, Rg)
        #Jfd = calcGradientFiniteDifference(S, H1, v2, Psi, Wg, Rg)

        #total energy
        E0 = E + mol.energy_nuc()

        #gradient
        Jvec = J.flatten()
        Jnorm = lalg.norm(Jvec)

        timeEnergyGradient = time.time()

        #scipy optimizer
        params = Psi.flatten()
        #params = Psi.flatten() - dt * Jvec

        sol = opt.minimize(fun, params, args = (ne, S, H1, v2, Wg, Rg), method = 'SLSQP', jac = jac, tol = tol)
        #sol = opt.minimize(fun, params, args = (ne, S, H1, v2, Wg, Rg), method = 'L-BFGS-B', jac = jac, tol = tol)

        #update parameters
        Psi = sol.x.copy().reshape((nso, ne))
        #if sol.success == True:
        #    Psi = sol.x.reshape((nso, ne))
        #else:
        #    Psi = Psi - dt * J

        timeOptimizer = time.time()

        #update error
        error = abs(E - Eold)
        Eold = E

        #print
        if doPrint == True:
            print(f"-------------------------------- {m} --------------------------------")

            print("Projected values")
            print(f"  Electronic Energy: {E}")
            print(f"  Total Energy: {E0}")
            #print("Gradient")
            #print(np.real(Gpq))
            #print(np.imag(Gpq))
            print(f"  Gradient Norm: {Jnorm}")
            print(f"  Time for Energy and Gradient: {timeEnergyGradient - iterStart}")

            print("Scipy Optimizer")
            print(f"  message: {sol.message}")
            print(f"  fun: {sol.fun}")
            print(f"  jac: {lalg.norm(sol.jac)}")
            print(f"  nit: {sol.nit}")
            print(f"  Time for Optimizer: {timeOptimizer - timeEnergyGradient}")

            #print("Occupied Orbitals")
            #print(Psi)

            print(f"Error: {error}")

        #check for convergence
        if (error < tol):
            break

    if doPrint == True:
        print(f"\nCalculation Complete")
        print(f"  Total Time: {time.time() - calcStart}")
        print(f"  Total Energy: {E0}")
    a = np.zeros((nso, nso))
    a[:,0:ne] = Psi
    return E0, a


np.set_printoptions(precision=6)
np.set_printoptions(suppress=True)


atomstring = f"H 0 0 0;"

mol = gto.M(
atom = atomstring,
unit = "bohr",
cart = False,
basis = {
'H':gto.basis.parse(
'''
H S
23.843185  0.00411490
10.212443  0.01046440
4.374164  0.02801110
1.873529  0.07588620
0.802465  0.18210620
0.343709  0.34852140
0.147217  0.37823130
0.063055  0.11642410
H S
0.139013  1.00000000
H P
0.740212  1.00000000
'''
)
},
ecp = {
'H':gto.basis.parse_ecp(
'''
H nelec 0
H ul
1 21.24359 1.00000
3 21.24359 21.24359
2 21.77696 -10.85192
H S
2 1.00000 0.00000
'''
)
},
spin = 1,
verbose = 5
)

#files for vmc
gto.write_gto(mol)
gto.write_pp(mol)

#rhf
mf = scf.GHF(mol)
norbs = 2 * mol.nao

dm = mf.get_init_guess()

##uncomment to use current another set of orbitals as guess for density matrix
#mo_occ = np.zeros(norbs)
#nocc = mf.mol.nelectron // 2
#mo_occ[:nocc] = 2
#mo_coeff = np.zeros((norbs, norbs))
#
#f = open("hf.txt", 'r')
#row = 0
#for line in f:
#    col = 0
#    for coeff in line.split():
#        mo_coeff[row, col]  = float(coeff)
#        col = col + 1
#    row = row + 1
#f.close()
#dm = mf.make_rdm1(mo_coeff, mo_occ)

dm = dm + (2.0 * np.random.rand(norbs, norbs) - 1.0) / 1000
mf.max_cycle = 100
mf.kernel(dm0 = dm)

##use another set of orbs as starting point
#mo_coeff = np.zeros((norbs, norbs))
#
#f = open("hf.txt", 'r')
#row = 0
#for line in f:
#    col = 0
#    for coeff in line.split():
#        mo_coeff[row, col]  = float(coeff)
#        col = col + 1
#    row = row + 1
#f.close()
#E0, mo = pGHF(mol, mo_coeff)

E0, mo = pGHF(mol, mf.mo_coeff)

asAO = mol.search_ao_label(["C 2s", "C 2p"])
f = open("asAO.txt", 'w')
for i in range(len(asAO)):
    f.write(f'{asAO[i]}\t')

fileHF = open("hf.txt", 'w')
for i in range(norbs):
    for j in range(norbs):
        fileHF.write('%16.10e '%(mo[i,j]))
    fileHF.write('\n')

'''
N = 3
a = 1.4

atomstring = ""
for i in range(N):
    atomstring += f"H 0 0 {i * a};"

mol = gto.Mole()
mol.atom = atomstring
#mol.atom = 'H 0 0 0; H 0 0 1.4; H 0 0 2.8;'
#mol.atom = 'H 0 0 0; H 0 0 1.4'
#mol.atom = 'H 0 0 0'
#mol.atom = 'Li 0 0 0'
mol.basis = 'sto-3g'
#mol.basis = '631g'
#mol.basis = 'ccpvdz'
mol.verbose = 4
mol.spin = 1
mol.unit = 'bohr'
mol.build()

norb = mol.nao
mf = scf.GHF(mol)
dm = mf.get_init_guess()
dm = dm + np.random.rand(2 * norb, 2 * norb) / 100
mf.max_cycle = 100
mf.kernel(dm0 = dm)

S = mf.get_ovlp()
occidx = mf.mo_occ > 0
occOrb = mf.mo_coeff[:, occidx]
#print(occOrb)
fock = mf.get_hcore() + mf.get_veff()
#print(fock)
#print("\n")

E0, mo = pGHF(mol, mf.mo_coeff)

#print("\n")
#print("Final Result")
#print("Energy")
#print(E0)
#print("Molecular Orbitals")
print(mo)
'''
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bnode0303.rc.int.colorado.edu', release='3.10.0-693.37.4.el7.x86_64', version='#1 SMP Fri Aug 10 12:34:55 EDT 2018', machine='x86_64', processor='x86_64')  Threads 1
Python 3.7.3 (default, Mar 27 2019, 22:11:17) 
[GCC 7.3.0]
numpy 1.16.4  scipy 1.3.0
Date: Mon May 24 18:20:37 2021
PySCF version 1.7.5
PySCF path  /projects/ilsa8974/apps/pyscf/pyscf
GIT HEAD      ref: refs/heads/master
GIT master branch  7a57d2f37184ea4cd3b52a590c945197b084f66d

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 1
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = bohr
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [8    /1   ]  23.843185         0.0041149
                                10.212443         0.0104644
                                4.374164          0.0280111
                                1.873529          0.0758862
                                0.802465          0.1821062
                                0.343709          0.3485214
                                0.147217          0.3782313
                                0.063055          0.1164241
[INPUT] 0    0    [1    /1   ]  0.139013             1
[INPUT] 1    0    [1    /1   ]  0.740212             1

nuclear repulsion = 0
number of shells = 3
number of NR pGTOs = 12
number of NR cGTOs = 5
basis = {'H': [[0, [23.843185, 0.0041149], [10.212443, 0.0104644], [4.374164, 0.0280111], [1.873529, 0.0758862], [0.802465, 0.1821062], [0.343709, 0.3485214], [0.147217, 0.3782313], [0.063055, 0.1164241]], [0, [0.139013, 1.0]], [1, [0.740212, 1.0]]]}
ecp = {'H': [0, [[-1, [[], [[21.24359, 1.0]], [[21.77696, -10.85192]], [[21.24359, 21.24359]], [], [], []]], [0, [[], [], [[1.0, 0.0]], [], [], [], []]]]]}
CPU time:         0.31


******** <class 'pyscf.scf.ghf.GHF'> ********
method = GHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /rc_scratch/ilsa8974/tmp04h0fkps
max_memory 4000 MB (current use 65 MB)
Set gradient conv threshold to 3.16228e-05

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .
E1 = -0.4970911049111056  E_coul = 0.1671150471931505
init E= -0.329976057717955
cond(S) = 25.866711827334537
    CPU time for initialize scf      0.01 sec, wall time      0.10 sec
  HOMO = -0.204542346026501  LUMO = -0.161455775502806
  mo_energy =
[-0.204542 -0.161456  0.790498  0.802617  1.551529  1.552386  1.553563
  1.561842  1.562441  1.563361]
multiplicity <S^2> = 0.75  2S+1 = 2
E1 = -0.4948818067582545  E_coul = -5.06655870952354e-07
cycle= 1 E= -0.494882313414125  delta_E= -0.165  |g|= 0.0634  |ddm|= 0.792
    CPU time for cycle= 1      0.01 sec, wall time      0.05 sec
  HOMO = -0.498227063675309  LUMO = 0.061097766101348
  mo_energy =
[-0.498227  0.061098  0.708438  0.856411  1.447571  1.447572  1.447572
  1.569778  1.569778  1.569778]
multiplicity <S^2> = 0.75  2S+1 = 2
E1 = -0.49938686741503596  E_coul = -4.669972410023367e-08
cycle= 2 E= -0.49938691411476  delta_E= -0.0045  |g|= 0.022  |ddm|= 0.272
    CPU time for cycle= 2      0.00 sec, wall time      0.02 sec
  HOMO = -0.50094016595547  LUMO = 0.0813139482938427
  mo_energy =
[-0.50094   0.081314  0.711107  0.893841  1.470413  1.470413  1.470413
  1.601567  1.601567  1.601567]
multiplicity <S^2> = 0.75  2S+1 = 2
E1 = -0.49999962695264577  E_coul = -9.807572827674658e-12
cycle= 3 E= -0.499999626962453  delta_E= -0.000613  |g|= 3.28e-05  |ddm|= 0.164
    CPU time for cycle= 3      0.00 sec, wall time      0.02 sec
  HOMO = -0.499702696935519  LUMO = 0.0811486220567914
  mo_energy =
[-0.499703  0.081149  0.709876  0.893745  1.470433  1.470433  1.470433
  1.601302  1.601302  1.601302]
multiplicity <S^2> = 0.75  2S+1 = 2
E1 = -0.49999962775805895  E_coul = 3.3070171365389466e-13
cycle= 4 E= -0.499999627757728  delta_E= -7.95e-10  |g|= 3.24e-06  |ddm|= 7.14e-05
    CPU time for cycle= 4      0.00 sec, wall time      0.02 sec
  HOMO = -0.499999627762763  LUMO = 0.081190513456512
  mo_energy =
[-0.5       0.081191  0.710173  0.893771  1.470431  1.470431  1.470431
  1.601369  1.601369  1.601369]
multiplicity <S^2> = 0.75  2S+1 = 2
E1 = -0.49999962776439305  E_coul = 1.3741508293975184e-14
Extra cycle  E= -0.499999627764379  delta_E= -6.65e-12  |g|= 7.69e-07  |ddm|= 3.1e-06
    CPU time for scf_cycle      0.03 sec, wall time      0.22 sec
    CPU time for SCF      0.03 sec, wall time      0.22 sec
converged SCF energy = -0.499999627764379  <S^2> = 0.75  2S+1 = 2

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .

Intel MKL ERROR: Parameter 8 was incorrect on entry to DGEMM .
-------------------------------- 0 --------------------------------
Projected values
  Electronic Energy: -0.4995935062602304
  Total Energy: -0.4995935062602304
  Gradient Norm: 0.06930234968375508
  Time for Energy and Gradient: 0.025356292724609375
Scipy Optimizer
  message: Optimization terminated successfully.
  fun: -0.4999996263544892
  jac: 8.425047321906062e-05
  nit: 4
  Time for Optimizer: 0.021869182586669922
Error: 100.49959350626023
-------------------------------- 1 --------------------------------
Projected values
  Electronic Energy: -0.4999996263544892
  Total Energy: -0.4999996263544892
  Gradient Norm: 8.425047321906062e-05
  Time for Energy and Gradient: 0.0049037933349609375
Scipy Optimizer
  message: Optimization terminated successfully.
  fun: -0.4999996263544892
  jac: 8.425047321906062e-05
  nit: 1
  Time for Optimizer: 0.004958152770996094
Error: 0.00040612009425877726
-------------------------------- 2 --------------------------------
Projected values
  Electronic Energy: -0.4999996263544892
  Total Energy: -0.4999996263544892
  Gradient Norm: 8.425047321906062e-05
  Time for Energy and Gradient: 0.004886627197265625
Scipy Optimizer
  message: Optimization terminated successfully.
  fun: -0.4999996263544892
  jac: 8.425047321906062e-05
  nit: 1
  Time for Optimizer: 0.004942655563354492
Error: 0.0

Calculation Complete
  Total Time: 0.06711292266845703
  Total Energy: -0.4999996263544892
