#INFO: **** input file is /projects/ilsa8974/experiments/VMCr/papers/jpghf_realspace/benzene/szghf/C/szGHF.py ****
import json
from pyscf import gto, scf, tools
import numpy as np
import scipy.linalg as lalg
import scipy.optimize as opt
import time
import sys

def contractEri(v2, dm1):
    nso = dm1.shape[0]
    nao = nso // 2

    dm1aa = dm1[:nao, :nao]
    dm1bb = dm1[nao:, nao:]
    dm1ab = dm1[:nao, nao:]
    dm1ba = dm1[nao:, :nao]

    #the spin indices on the J, K matrices are from the contracted indices
    Jaa = np.einsum('pqrs,sr->pq', v2, dm1aa, dtype = complex)

    Jbb = np.einsum('pqrs,sr->pq', v2, dm1bb, dtype = complex)

    Kaa = np.einsum('psrq,sr->pq', v2, dm1aa, dtype = complex)
    Kbb = np.einsum('psrq,sr->pq', v2, dm1bb, dtype = complex)

    Kab = np.einsum('psrq,sr->pq', v2, dm1ba, dtype = complex)
    Kba = np.einsum('psrq,sr->pq', v2, dm1ab, dtype = complex)

    G1 = np.zeros((nso, nso), dtype = complex)
    G1[:nao, :nao] = Jaa + Jbb - Kaa
    G1[nao:, nao:] = Jaa + Jbb - Kbb
    G1[:nao, nao:] = - Kba
    G1[nao:, :nao] = - Kab

    return G1

def calcSzSymmetryProjector(nao, sz, nGrid = 8):
    Wg = []
    Rg = []
    for p in range(nGrid):
        theta = 2 * np.pi * p / nGrid

        w = np.exp(- 1j * theta * sz) / nGrid
        Wg.append(w)

        r = lalg.block_diag(np.exp(1j * theta * 0.5) * np.identity(nao), np.exp(1j * theta * (- 0.5)) * np.identity(nao))
        Rg.append(r)
    return Wg, Rg

def calcEnergy(S, H1, v2, Psi, Wg, Rg):
    Bra = Psi.copy()
    Ket = Psi.copy()

    D = 0.0
    N = 0.0
    for i in range(len(Wg)):
        Ketg = Rg[i].dot(Ket)

        #overlap quantities
        O = Bra.conj().T.dot(S).dot(Ketg)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #density matrix
        dm1 = Ketg.dot(invO).dot(Bra.conj().T)

        #hamiltonian quantities
        G1 = contractEri(v2, dm1)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, dm1, dtype = complex)

        #averages with symmetry weights
        D += Wg[i] * detO
        N += Wg[i] * detO * H

    E = N / D
    return np.real(E)

def calcGradient(S, H1, v2, Psi, Wg, Rg):
    Bra = Psi.copy()
    Ket = Psi.copy()

    D = 0.0
    N = 0.0
    Dab = np.zeros(Psi.shape, dtype = complex)
    Nab = np.zeros(Psi.shape, dtype = complex)
    for i in range(len(Wg)):
        Ketg = Rg[i].dot(Ket)

        #overlap quantities
        O = Bra.conj().T.dot(S).dot(Ketg)
        invO = lalg.inv(O)
        detO = lalg.det(O)

        #derivative of detO with respect to a,b orbital coefficient
        detOab  = detO * np.einsum('ai,i,ij,jb->ab', S, np.diag(Rg[i]), Psi, invO, dtype = complex)
        #detOab += detO * np.einsum('bi,ji,ja,a->ab', invO, Psi, S, np.diag(Rg[i]), dtype = complex)
        detOab = detOab + detOab

        #density matrix
        dm1 = Ketg.dot(invO).dot(Bra.conj().T)

        #hamiltonian quantities
        G1 = contractEri(v2, dm1)
        F1 = H1 + 0.5 * G1
        H = np.einsum('pq,qp->', F1, dm1, dtype = complex)

        #drivative of H with respect to a,b orbital coefficient
        M = H1 + G1
        A1ab = np.einsum('bi,pi,pa,a->ab', invO, Psi, M, np.diag(Rg[i]), dtype = complex)
        #A2ab = np.einsum('aq,q,qi,ib->ab', M, np.diag(Rg[i]), Psi, invO, dtype = complex)
        A2ab = A1ab

        #B1ab = - np.einsum('ai,i,ij,jk,pk,pq,q,ql,lb->ab', S, np.diag(Rg[i]), Psi, invO, Psi, M, np.diag(Rg[i]), Psi, invO, dtype = complex)
        C1ak = np.einsum('ai,i,ij,jk->ak', S, np.diag(Rg[i]), Psi, invO, dtype = complex)
        D1pb = np.einsum('pq,q,ql,lb->pb', M, np.diag(Rg[i]), Psi, invO, dtype = complex)
        B1ab = - np.einsum('ak,pk,pb->ab', C1ak, Psi, D1pb)

        #B2ab = - np.einsum('bi,pi,pq,q,qj,jk,lk,la,a->ab', invO, Psi, M, np.diag(Rg[i]), Psi, invO, Psi, S, np.diag(Rg[i]), dtype = complex)
        #C2bq = np.einsum('bi,pi,pq,q->bq', invO, Psi, M, np.diag(Rg[i]), dtype = complex)
        #D2ja = np.einsum('jk,lk,la,a->ja', invO, Psi, S, np.diag(Rg[i]), dtype = complex)
        #B2ab = - np.einsum('bq,qj,ja->ab', C2bq, Psi, D2ja, dtype = complex)
        B2ab = B1ab

        Hab = A1ab + A2ab + B1ab + B2ab

        #averages with symmetry weights
        D += Wg[i] * detO
        Dab += Wg[i] * detOab

        N += Wg[i] * detO * H
        Nab += Wg[i] * (detOab * H + detO * Hab)

    E = N / D
    J = Nab / D - E * (Dab / D)
    return np.real(J)

def calcGradientFiniteDifference(S, H1, v2, Psi, Wg, Rg):
    ds = 1.e-6
    J = np.zeros(Psi.shape, dtype = complex)

    E0 = calcEnergy(S, H1, v2, Psi, Wg, Rg)
    for a in range(Psi.shape[0]):
        for b in range(Psi.shape[1]):
            Ket = Psi.copy()
            Ket[a, b] += ds
            E = calcEnergy(S, H1, v2, Ket, Wg, Rg)

            J[a, b] = (E - E0) / ds

    return J

#the following four functions are helpers to use scipy's optimization library

def real_to_complex(z): #real vector of length 2n -> complex of length n
    return z[:len(z)//2] + 1j * z[len(z)//2:]

def complex_to_real(z): #complex vector of length n -> real of length 2n
    return np.concatenate((np.real(z), np.imag(z)))

def fun(params, nelectron, S, H1, v2, Wg, Rg):
    #wavefunction
    nso = S.shape[0]
    Psi = params.reshape((nso, nelectron))
    return calcEnergy(S, H1, v2, Psi, Wg, Rg)

def jac(params, nelectron, S, H1, v2, Wg, Rg):
    #wavefunction
    nso = S.shape[0]
    Psi = params.reshape((nso, nelectron))
    J = calcGradient(S, H1, v2, Psi, Wg, Rg)
    return J.flatten()

def pGHF(mol, mo_coeff):
    #basic molecule info and integrals
    sz = float(mol.spin) / 2
    ne = mol.nelectron
    nao = mol.nao
    nso = 2 * mol.nao
    s = mol.intor('int1e_ovlp')
    t = mol.intor('int1e_kin')
    v1 = mol.intor('int1e_nuc')
    v1ecp = mol.intor('ECPscalar')
    v2 = mol.intor('int2e', aosym='s1')

    #spin integrals
    S = lalg.block_diag(s, s)
    h1 = t + v1 + v1ecp
    H1 = lalg.block_diag(h1, h1)

    assert(mo_coeff.shape[0] == nso)
    assert(mo_coeff.shape[1] == nso)
    #Psi will always be the wavefunction
    Psi = mo_coeff[:, 0:ne].copy()

    #slight amount of noise helps optimization
    Psi += np.random.randn(nso, ne) / 100

    #Sz symmetry projector
    nGrid = 10
    Wg, Rg = calcSzSymmetryProjector(nao, sz, nGrid)

    Eold = 100
    dt = 0.1
    tol = 1.e-8
    doPrint = True
    calcStart = time.time()
    for m in range(20):
        iterStart = time.time()

        #energy
        E = calcEnergy(S, H1, v2, Psi, Wg, Rg)

        #gradient
        J = calcGradient(S, H1, v2, Psi, Wg, Rg)
        #Jfd = calcGradientFiniteDifference(S, H1, v2, Psi, Wg, Rg)

        #total energy
        E0 = E + mol.energy_nuc()

        #gradient
        Jvec = J.flatten()
        Jnorm = lalg.norm(Jvec)

        timeEnergyGradient = time.time()

        #scipy optimizer
        params = Psi.flatten()
        #params = Psi.flatten() - dt * Jvec

        sol = opt.minimize(fun, params, args = (ne, S, H1, v2, Wg, Rg), method = 'SLSQP', jac = jac, tol = tol)
        #sol = opt.minimize(fun, params, args = (ne, S, H1, v2, Wg, Rg), method = 'L-BFGS-B', jac = jac, tol = tol)

        #update parameters
        Psi = sol.x.copy().reshape((nso, ne))
        #if sol.success == True:
        #    Psi = sol.x.reshape((nso, ne))
        #else:
        #    Psi = Psi - dt * J

        timeOptimizer = time.time()

        #update error
        error = abs(E - Eold)
        Eold = E

        #print
        if doPrint == True:
            print(f"-------------------------------- {m} --------------------------------")

            print("Projected values")
            print(f"  Electronic Energy: {E}")
            print(f"  Total Energy: {E0}")
            #print("Gradient")
            #print(np.real(Gpq))
            #print(np.imag(Gpq))
            print(f"  Gradient Norm: {Jnorm}")
            print(f"  Time for Energy and Gradient: {timeEnergyGradient - iterStart}")

            print("Scipy Optimizer")
            print(f"  message: {sol.message}")
            print(f"  fun: {sol.fun}")
            print(f"  jac: {lalg.norm(sol.jac)}")
            print(f"  nit: {sol.nit}")
            print(f"  Time for Optimizer: {timeOptimizer - timeEnergyGradient}")

            #print("Occupied Orbitals")
            #print(Psi)

            print(f"Error: {error}")

        #check for convergence
        if (error < tol):
            break

    if doPrint == True:
        print(f"\nCalculation Complete")
        print(f"  Total Time: {time.time() - calcStart}")
        print(f"  Total Energy: {E0}")
    a = np.zeros((nso, nso))
    a[:,0:ne] = Psi
    return E0, a


np.set_printoptions(precision=6)
np.set_printoptions(suppress=True)


atomstring = f"C 0 0 0;"

mol = gto.M(
atom = atomstring,
unit = "bohr",
cart = False,
basis = {
'C':gto.basis.parse(
'''
C s
13.073594 0.0051583
6.541187 0.0603424
4.573411 -0.1978471
1.637494 -0.0810340
0.819297 0.2321726
0.409924 0.2914643
0.231300 0.4336405
0.102619 0.2131940
0.051344 0.0049848
C s
0.127852 1.000000
C p
9.934169 0.0209076
3.886955 0.0572698
1.871016 0.1122682
0.935757 0.2130082
0.468003 0.2835815
0.239473 0.3011207
0.117063 0.2016934
0.058547 0.0453575
0.029281 0.0029775
C p
0.149161 1.000000
C d
0.561160 1.000000
'''
)
},
ecp = {
'C':gto.basis.parse_ecp(
'''
C nelec 2
C ul
1 14.43502 4.00000
3 8.39889 57.74008
2 7.38188 -25.81955
C S
2 7.76079 52.13345
'''
)
},
spin = 2,
verbose = 5
)

#files for vmc
gto.write_gto(mol)
gto.write_pp(mol)

#rhf
mf = scf.GHF(mol)
norbs = 2 * mol.nao

dm = mf.get_init_guess()

##uncomment to use current another set of orbitals as guess for density matrix
#mo_occ = np.zeros(norbs)
#nocc = mf.mol.nelectron // 2
#mo_occ[:nocc] = 2
#mo_coeff = np.zeros((norbs, norbs))
#
#f = open("hf.txt", 'r')
#row = 0
#for line in f:
#    col = 0
#    for coeff in line.split():
#        mo_coeff[row, col]  = float(coeff)
#        col = col + 1
#    row = row + 1
#f.close()
#dm = mf.make_rdm1(mo_coeff, mo_occ)

dm = dm + (2.0 * np.random.rand(norbs, norbs) - 1.0) / 1000
mf.max_cycle = 100
mf.kernel(dm0 = dm)

##use another set of orbs as starting point
#mo_coeff = np.zeros((norbs, norbs))
#
#f = open("hf.txt", 'r')
#row = 0
#for line in f:
#    col = 0
#    for coeff in line.split():
#        mo_coeff[row, col]  = float(coeff)
#        col = col + 1
#    row = row + 1
#f.close()
#E0, mo = pGHF(mol, mo_coeff)

E0, mo = pGHF(mol, mf.mo_coeff)

asAO = mol.search_ao_label(["C 2s", "C 2p"])
f = open("asAO.txt", 'w')
for i in range(len(asAO)):
    f.write(f'{asAO[i]}\t')

fileHF = open("hf.txt", 'w')
for i in range(norbs):
    for j in range(norbs):
        fileHF.write('%16.10e '%(mo[i,j]))
    fileHF.write('\n')

'''
N = 3
a = 1.4

atomstring = ""
for i in range(N):
    atomstring += f"H 0 0 {i * a};"

mol = gto.Mole()
mol.atom = atomstring
#mol.atom = 'H 0 0 0; H 0 0 1.4; H 0 0 2.8;'
#mol.atom = 'H 0 0 0; H 0 0 1.4'
#mol.atom = 'H 0 0 0'
#mol.atom = 'Li 0 0 0'
mol.basis = 'sto-3g'
#mol.basis = '631g'
#mol.basis = 'ccpvdz'
mol.verbose = 4
mol.spin = 1
mol.unit = 'bohr'
mol.build()

norb = mol.nao
mf = scf.GHF(mol)
dm = mf.get_init_guess()
dm = dm + np.random.rand(2 * norb, 2 * norb) / 100
mf.max_cycle = 100
mf.kernel(dm0 = dm)

S = mf.get_ovlp()
occidx = mf.mo_occ > 0
occOrb = mf.mo_coeff[:, occidx]
#print(occOrb)
fock = mf.get_hcore() + mf.get_veff()
#print(fock)
#print("\n")

E0, mo = pGHF(mol, mf.mo_coeff)

#print("\n")
#print("Final Result")
#print("Energy")
#print(E0)
#print("Molecular Orbitals")
print(mo)
'''
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bnode0302.rc.int.colorado.edu', release='3.10.0-693.33.1.el7.x86_64', version='#1 SMP Thu May 24 16:41:13 UTC 2018', machine='x86_64', processor='x86_64')  Threads 1
Python 3.7.3 (default, Mar 27 2019, 22:11:17) 
[GCC 7.3.0]
numpy 1.16.4  scipy 1.3.0
Date: Mon May 24 17:38:28 2021
PySCF version 1.7.5
PySCF path  /projects/ilsa8974/apps/pyscf/pyscf
GIT HEAD      ref: refs/heads/master
GIT master branch  7a57d2f37184ea4cd3b52a590c945197b084f66d

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 4
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 2
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = bohr
[INPUT]  1 C      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] C
[INPUT] 0    0    [9    /1   ]  13.073594         0.0051583
                                6.541187          0.0603424
                                4.573411          -0.1978471
                                1.637494          -0.081034
                                0.819297          0.2321726
                                0.409924          0.2914643
                                0.2313            0.4336405
                                0.102619          0.213194
                                0.051344          0.0049848
[INPUT] 0    0    [1    /1   ]  0.127852             1
[INPUT] 1    0    [9    /1   ]  9.934169          0.0209076
                                3.886955          0.0572698
                                1.871016          0.1122682
                                0.935757          0.2130082
                                0.468003          0.2835815
                                0.239473          0.3011207
                                0.117063          0.2016934
                                0.058547          0.0453575
                                0.029281          0.0029775
[INPUT] 1    0    [1    /1   ]  0.149161             1
[INPUT] 2    0    [1    /1   ]  0.56116              1

nuclear repulsion = 0
number of shells = 5
number of NR pGTOs = 45
number of NR cGTOs = 13
basis = {'C': [[0, [13.073594, 0.0051583], [6.541187, 0.0603424], [4.573411, -0.1978471], [1.637494, -0.081034], [0.819297, 0.2321726], [0.409924, 0.2914643], [0.2313, 0.4336405], [0.102619, 0.213194], [0.051344, 0.0049848]], [0, [0.127852, 1.0]], [1, [9.934169, 0.0209076], [3.886955, 0.0572698], [1.871016, 0.1122682], [0.935757, 0.2130082], [0.468003, 0.2835815], [0.239473, 0.3011207], [0.117063, 0.2016934], [0.058547, 0.0453575], [0.029281, 0.0029775]], [1, [0.149161, 1.0]], [2, [0.56116, 1.0]]]}
ecp = {'C': [2, [[-1, [[], [[14.43502, 4.0]], [[7.38188, -25.81955]], [[8.39889, 57.74008]], [], [], []]], [0, [[], [], [[7.76079, 52.13345]], [], [], [], []]]]]}
CPU time:         0.42


******** <class 'pyscf.scf.ghf.GHF'> ********
method = GHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /rc_scratch/ilsa8974/tmp9yftjzh_
max_memory 4000 MB (current use 65 MB)
Set gradient conv threshold to 3.16228e-05
E1 = -8.347286821202195  E_coul = 3.404229651551539
init E= -4.94305716965066
cond(S) = 25.398049829260064
    CPU time for initialize scf      0.02 sec, wall time      0.20 sec

WARN: HOMO -0.0870436858736352 == LUMO -0.0865461727297692

  mo_energy =
[-0.741186 -0.671939 -0.087216 -0.087044 -0.086546 -0.057445 -0.056473
 -0.056059  0.693385  0.695851  0.696863  0.704377  0.705533  0.707586
  0.947337  0.956042  1.426409  1.426829  1.427625  1.427932  1.428376
  1.437909  1.438353  1.438927  1.439661  1.439895]
multiplicity <S^2> = 1.9997668  2S+1 = 2.9998446
E1 = -8.14411634762174  E_coul = 2.8537355010183134
cycle= 1 E= -5.29038084660343  delta_E= -0.347  |g|= 0.157  |ddm|= 0.872
    CPU time for cycle= 1      0.01 sec, wall time      0.06 sec
  HOMO = -0.460198099862907  LUMO = -0.0192474452727443
  mo_energy =
[-0.879114 -0.657441 -0.46101  -0.460198 -0.019247  0.033023  0.08214
  0.082433  0.59838   0.59925   0.646637  0.67553   0.715384  0.71681
  0.890156  0.946098  1.307791  1.307986  1.33179   1.332369  1.341486
  1.408191  1.421348  1.421928  1.464088  1.464283]
multiplicity <S^2> = 2.0019037  2S+1 = 3.0012689
E1 = -8.318161077475281  E_coul = 3.0022534082763346
cycle= 2 E= -5.31590766919895  delta_E= -0.0255  |g|= 0.0437  |ddm|= 0.457
    CPU time for cycle= 2      0.00 sec, wall time      0.06 sec
  HOMO = -0.431361008366045  LUMO = 0.0438105502876853
  mo_energy =
[-0.824442 -0.580321 -0.43187  -0.431361  0.043811  0.084584  0.140961
  0.141054  0.632173  0.632964  0.713742  0.746054  0.795677  0.796272
  0.927195  0.983386  1.362488  1.362556  1.391632  1.391839  1.40374
  1.470503  1.484635  1.484835  1.532939  1.533007]
multiplicity <S^2> = 2.0049272  2S+1 = 3.003283
E1 = -8.33975921760778  E_coul = 3.021555401246085
cycle= 3 E= -5.3182038163617  delta_E= -0.0023  |g|= 0.00729  |ddm|= 0.183
    CPU time for cycle= 3      0.00 sec, wall time      0.02 sec
  HOMO = -0.438959999897293  LUMO = 0.0370665019067375
  mo_energy =
[-0.832443 -0.58501  -0.439261 -0.43896   0.037067  0.076602  0.134248
  0.134299  0.624664  0.625102  0.705756  0.737218  0.787768  0.788105
  0.922695  0.981416  1.354052  1.354081  1.383491  1.383579  1.39549
  1.461892  1.476177  1.47626   1.524678  1.524708]
multiplicity <S^2> = 2.0055507  2S+1 = 3.0036982
E1 = -8.341653921623191  E_coul = 3.0233282031494113
cycle= 4 E= -5.31832571847378  delta_E= -0.000122  |g|= 0.00154  |ddm|= 0.0334
    CPU time for cycle= 4      0.00 sec, wall time      0.03 sec
  HOMO = -0.439133512557264  LUMO = 0.0375541049884208
  mo_energy =
[-0.832413 -0.583524 -0.43924  -0.439134  0.037554  0.077042  0.134722
  0.134738  0.624669  0.624831  0.706711  0.737664  0.789106  0.789239
  0.922875  0.98211   1.354469  1.354476  1.383952  1.383971  1.395906
  1.462519  1.476815  1.476833  1.525288  1.525295]
multiplicity <S^2> = 2.0056867  2S+1 = 3.0037888
E1 = -8.342404013138477  E_coul = 3.0240367684976017
cycle= 5 E= -5.31836724464087  delta_E= -4.15e-05  |g|= 0.000322  |ddm|= 0.00925
    CPU time for cycle= 5      0.00 sec, wall time      0.03 sec
  HOMO = -0.43916037034902  LUMO = 0.037576164540913
  mo_energy =
[-0.832352 -0.583612 -0.439177 -0.43916   0.037576  0.077012  0.134727
  0.134729  0.62463   0.624661  0.706888  0.73747   0.789231  0.789259
  0.922888  0.982104  1.354484  1.354484  1.383961  1.383964  1.395897
  1.462505  1.476803  1.476806  1.52528   1.525281]
multiplicity <S^2> = 2.0056892  2S+1 = 3.0037904
E1 = -8.342435526748833  E_coul = 3.024055939340058
cycle= 6 E= -5.31837958740878  delta_E= -1.23e-05  |g|= 0.000229  |ddm|= 0.00141
    CPU time for cycle= 6      0.00 sec, wall time      0.02 sec
  HOMO = -0.439192648024099  LUMO = 0.0375730686294328
  mo_energy =
[-0.832368 -0.583624 -0.439218 -0.439193  0.037573  0.076999  0.134729
  0.134733  0.624655  0.624681  0.706923  0.737396  0.78922   0.789238
  0.92289   0.982053  1.354463  1.354465  1.38395   1.383957  1.395889
  1.462497  1.476794  1.476801  1.525271  1.525273]
multiplicity <S^2> = 2.0057023  2S+1 = 3.0037991
E1 = -8.342409977110798  E_coul = 3.024026800583326
cycle= 7 E= -5.31838317652747  delta_E= -3.59e-06  |g|= 0.000173  |ddm|= 0.00186
    CPU time for cycle= 7      0.00 sec, wall time      0.02 sec
  HOMO = -0.439126315897563  LUMO = 0.0375739211827483
  mo_energy =
[-0.83236  -0.583664 -0.439141 -0.439126  0.037574  0.077002  0.134721
  0.134723  0.624632  0.624642  0.706872  0.737467  0.789224  0.789228
  0.92287   0.982105  1.354481  1.354482  1.383962  1.383964  1.395901
  1.462497  1.476795  1.476796  1.52527   1.52527 ]
multiplicity <S^2> = 2.0057235  2S+1 = 3.0038132
E1 = -8.342417399237943  E_coul = 3.0240373557428937
cycle= 8 E= -5.31838004349505  delta_E= 3.13e-06  |g|= 4.85e-05  |ddm|= 0.00415
    CPU time for cycle= 8      0.00 sec, wall time      0.03 sec
  HOMO = -0.439214062735153  LUMO = 0.0375689580644996
  mo_energy =
[-0.832372 -0.583575 -0.439216 -0.439214  0.037569  0.077014  0.134732
  0.134733  0.624685  0.624688  0.706879  0.737462  0.789225  0.789228
  0.922896  0.98207   1.354467  1.354467  1.383954  1.383954  1.395891
  1.462502  1.476807  1.476807  1.525284  1.525284]
multiplicity <S^2> = 2.0057235  2S+1 = 3.0038132
E1 = -8.342420916700842  E_coul = 3.0240406711995313
cycle= 9 E= -5.31838024550131  delta_E= -2.02e-07  |g|= 3.32e-05  |ddm|= 0.00033
    CPU time for cycle= 9      0.00 sec, wall time      0.02 sec
  HOMO = -0.439177455650279  LUMO = 0.0375720816040074
  mo_energy =
[-0.832361 -0.583615 -0.439187 -0.439177  0.037572  0.077008  0.134729
  0.134729  0.624658  0.624665  0.706884  0.737459  0.789228  0.789231
  0.922888  0.982085  1.354473  1.354474  1.383958  1.383959  1.395896
  1.4625    1.476802  1.476803  1.525278  1.525278]
multiplicity <S^2> = 2.0057227  2S+1 = 3.0038127
E1 = -8.342421535730935  E_coul = 3.0240409506118664
cycle= 10 E= -5.31838058511907  delta_E= -3.4e-07  |g|= 1.73e-05  |ddm|= 0.000275
    CPU time for cycle= 10      0.00 sec, wall time      0.02 sec
  HOMO = -0.439175327154839  LUMO = 0.0375748600962174
  mo_energy =
[-0.832363 -0.583612 -0.439179 -0.439175  0.037575  0.077011  0.134731
  0.134731  0.624664  0.624667  0.706885  0.737463  0.789231  0.789233
  0.922887  0.982086  1.354477  1.354477  1.383961  1.383961  1.395899
  1.462503  1.476805  1.476805  1.525281  1.525281]
multiplicity <S^2> = 2.0057232  2S+1 = 3.003813
E1 = -8.342420032259456  E_coul = 3.024039537411823
cycle= 11 E= -5.31838049484763  delta_E= 9.03e-08  |g|= 7.88e-06  |ddm|= 0.000124
    CPU time for cycle= 11      0.00 sec, wall time      0.03 sec
  HOMO = -0.439180262844263  LUMO = 0.0375706464236762
  mo_energy =
[-0.832367 -0.583615 -0.439182 -0.43918   0.037571  0.077007  0.134727
  0.134727  0.624662  0.624664  0.706879  0.73746   0.789226  0.789227
  0.922885  0.982084  1.354472  1.354472  1.383957  1.383957  1.395895
  1.462499  1.476801  1.476801  1.525277  1.525277]
multiplicity <S^2> = 2.0057233  2S+1 = 3.0038131
E1 = -8.342420038539206  E_coul = 3.024039643230617
cycle= 12 E= -5.31838039530859  delta_E= 9.95e-08  |g|= 3.79e-06  |ddm|= 5.64e-05
    CPU time for cycle= 12      0.00 sec, wall time      0.02 sec
  HOMO = -0.439179589331308  LUMO = 0.037571848534806
  mo_energy =
[-0.832365 -0.583614 -0.439181 -0.43918   0.037572  0.077009  0.134728
  0.134729  0.624663  0.624664  0.70688   0.737461  0.789228  0.789228
  0.922886  0.982085  1.354474  1.354474  1.383958  1.383958  1.395896
  1.4625    1.476802  1.476802  1.525278  1.525278]
multiplicity <S^2> = 2.0057232  2S+1 = 3.003813
E1 = -8.342420261779447  E_coul = 3.024039867521831
cycle= 13 E= -5.31838039425762  delta_E= 1.05e-09  |g|= 2.45e-06  |ddm|= 1.66e-05
    CPU time for cycle= 13      0.00 sec, wall time      0.03 sec
  HOMO = -0.439180056508605  LUMO = 0.0375714595945151
  mo_energy =
[-0.832365 -0.583615 -0.439181 -0.43918   0.037571  0.077008  0.134728
  0.134728  0.624663  0.624663  0.70688   0.73746   0.789228  0.789228
  0.922886  0.982084  1.354473  1.354473  1.383958  1.383958  1.395896
  1.4625    1.476802  1.476802  1.525278  1.525278]
multiplicity <S^2> = 2.0057231  2S+1 = 3.003813
E1 = -8.342420032189962  E_coul = 3.024039617895105
cycle= 14 E= -5.31838041429486  delta_E= -2e-08  |g|= 1.87e-06  |ddm|= 1.63e-05
    CPU time for cycle= 14      0.00 sec, wall time      0.02 sec
  HOMO = -0.439180324106382  LUMO = 0.037571442093172
  mo_energy =
[-0.832365 -0.583615 -0.439181 -0.43918   0.037571  0.077008  0.134728
  0.134728  0.624663  0.624663  0.70688   0.73746   0.789228  0.789228
  0.922886  0.982085  1.354473  1.354473  1.383958  1.383958  1.395896
  1.4625    1.476802  1.476802  1.525277  1.525277]
multiplicity <S^2> = 2.0057232  2S+1 = 3.003813
E1 = -8.342420236076983  E_coul = 3.0240398052013986
cycle= 15 E= -5.31838043087558  delta_E= -1.66e-08  |g|= 7.74e-07  |ddm|= 3.58e-05
    CPU time for cycle= 15      0.00 sec, wall time      0.03 sec
  HOMO = -0.439180250894219  LUMO = 0.0375716663952433
  mo_energy =
[-0.832365 -0.583615 -0.43918  -0.43918   0.037572  0.077008  0.134728
  0.134728  0.624663  0.624663  0.70688   0.737461  0.789228  0.789228
  0.922886  0.982085  1.354474  1.354474  1.383958  1.383958  1.395896
  1.4625    1.476802  1.476802  1.525278  1.525278]
multiplicity <S^2> = 2.0057232  2S+1 = 3.003813
E1 = -8.342420197037129  E_coul = 3.024039778544498
cycle= 16 E= -5.31838041849263  delta_E= 1.24e-08  |g|= 2.38e-07  |ddm|= 1.28e-05
    CPU time for cycle= 16      0.00 sec, wall time      0.02 sec
  HOMO = -0.439180381432225  LUMO = 0.0375715381505054
  mo_energy =
[-0.832365 -0.583615 -0.43918  -0.43918   0.037572  0.077008  0.134728
  0.134728  0.624663  0.624663  0.70688   0.737461  0.789228  0.789228
  0.922886  0.982085  1.354473  1.354473  1.383958  1.383958  1.395896
  1.4625    1.476802  1.476802  1.525278  1.525278]
multiplicity <S^2> = 2.0057231  2S+1 = 3.003813
E1 = -8.34242014596853  E_coul = 3.0240397329648125
cycle= 17 E= -5.31838041300372  delta_E= 5.49e-09  |g|= 1.48e-07  |ddm|= 1.21e-06
    CPU time for cycle= 17      0.00 sec, wall time      0.03 sec
Linear dependence found in DIIS error vectors.
  HOMO = -0.439180391729504  LUMO = 0.0375715321735043
  mo_energy =
[-0.832365 -0.583615 -0.43918  -0.43918   0.037572  0.077008  0.134728
  0.134728  0.624663  0.624663  0.70688   0.737461  0.789228  0.789228
  0.922886  0.982085  1.354473  1.354473  1.383958  1.383958  1.395896
  1.4625    1.476802  1.476802  1.525278  1.525278]
multiplicity <S^2> = 2.0057231  2S+1 = 3.003813
E1 = -8.342420138514656  E_coul = 3.024039726511986
cycle= 18 E= -5.31838041200267  delta_E= 1e-09  |g|= 1.32e-07  |ddm|= 2.77e-07
    CPU time for cycle= 18      0.00 sec, wall time      0.03 sec
Linear dependence found in DIIS error vectors.
  HOMO = -0.439180395941613  LUMO = 0.0375715299275384
  mo_energy =
[-0.832365 -0.583615 -0.43918  -0.43918   0.037572  0.077008  0.134728
  0.134728  0.624663  0.624663  0.70688   0.737461  0.789228  0.789228
  0.922886  0.982085  1.354473  1.354473  1.383958  1.383958  1.395896
  1.4625    1.476802  1.476802  1.525278  1.525278]
multiplicity <S^2> = 2.0057231  2S+1 = 3.003813
E1 = -8.342420135257965  E_coul = 3.0240397235891536
cycle= 19 E= -5.31838041166881  delta_E= 3.34e-10  |g|= 1.25e-07  |ddm|= 1.22e-07
    CPU time for cycle= 19      0.00 sec, wall time      0.03 sec
  HOMO = -0.439180409421638  LUMO = 0.0375715227449749
  mo_energy =
[-0.832365 -0.583615 -0.43918  -0.43918   0.037572  0.077008  0.134728
  0.134728  0.624663  0.624663  0.70688   0.737461  0.789228  0.789228
  0.922886  0.982085  1.354473  1.354473  1.383958  1.383958  1.395896
  1.4625    1.476802  1.476802  1.525278  1.525278]
multiplicity <S^2> = 2.0057231  2S+1 = 3.003813
E1 = -8.342420127747005  E_coul = 3.024039717172951
Extra cycle  E= -5.31838041057405  delta_E= 1.09e-09  |g|= 1.1e-07  |ddm|= 2.85e-07
    CPU time for scf_cycle      0.11 sec, wall time      0.76 sec
    CPU time for SCF      0.11 sec, wall time      0.76 sec
converged SCF energy = -5.31838041057405  <S^2> = 2.0057231  2S+1 = 3.003813
-------------------------------- 0 --------------------------------
Projected values
  Electronic Energy: -5.306344012383573
  Total Energy: -5.306344012383573
  Gradient Norm: 0.3619610783206089
  Time for Energy and Gradient: 0.10891175270080566
Scipy Optimizer
  message: Iteration limit exceeded
  fun: -5.341710580251129
  jac: 0.0005310812479844818
  nit: 101
  Time for Optimizer: 3.324831962585449
Error: 105.30634401238358
-------------------------------- 1 --------------------------------
Projected values
  Electronic Energy: -5.341710580251129
  Total Energy: -5.341710580251129
  Gradient Norm: 0.0005310812479844818
  Time for Energy and Gradient: 0.030898571014404297
Scipy Optimizer
  message: Optimization terminated successfully.
  fun: -5.341711434434463
  jac: 0.0004254495827157678
  nit: 15
  Time for Optimizer: 0.5928266048431396
Error: 0.03536656786755632
-------------------------------- 2 --------------------------------
Projected values
  Electronic Energy: -5.341711434434463
  Total Energy: -5.341711434434463
  Gradient Norm: 0.0005031035385959935
  Time for Energy and Gradient: 0.02936840057373047
Scipy Optimizer
  message: Optimization terminated successfully.
  fun: -5.341711440606491
  jac: 0.0005031035385959935
  nit: 1
  Time for Optimizer: 0.05099844932556152
Error: 8.541833338426841e-07
-------------------------------- 3 --------------------------------
Projected values
  Electronic Energy: -5.341711440606491
  Total Energy: -5.341711440606491
  Gradient Norm: 0.0005536762031749894
  Time for Energy and Gradient: 0.03000950813293457
Scipy Optimizer
  message: Optimization terminated successfully.
  fun: -5.3417114489555795
  jac: 0.0005536762031749894
  nit: 1
  Time for Optimizer: 0.061348915100097656
Error: 6.1720282218402645e-09

Calculation Complete
  Total Time: 4.229585409164429
  Total Energy: -5.341711440606491
